var search_data = {"index":{"searchIndex":["api","community","district","field","formatdefinition","gui","hash","import","locality","namespace","numeric","object","road","spatio","geocode","osmdata","street","importjob","importer","nolocationerror","parser","base","city","district","state","street","persist","reader","base","csv","excel","rss","sparqlclient","state","all_fields()","cities()","compatibility_in_namespace()","compatible?()","conf()","create_fields()","create_namespace()","create_table()","duration()","geo_columns()","importer_parameters_format()","inherited()","mandatory_fields()","meta_data()","new()","new()","new()","new()","new()","new()","new()","new()","parse_params()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","reader_class()","redis()","same_keys?()","setup_namespace()","states()","title_columns()","validate_reader_class()","gemfile","rakefile"],"longSearchIndex":["api","community","district","field","formatdefinition","gui","hash","import","locality","namespace","numeric","object","road","spatio","spatio::geocode","spatio::geocode::osmdata","spatio::geocode::street","spatio::importjob","spatio::importer","spatio::nolocationerror","spatio::parser","spatio::parser::base","spatio::parser::city","spatio::parser::district","spatio::parser::state","spatio::parser::street","spatio::persist","spatio::reader","spatio::reader::base","spatio::reader::csv","spatio::reader::excel","spatio::reader::rss","spatio::sparqlclient","state","namespace#all_fields()","spatio::sparqlclient#cities()","import#compatibility_in_namespace()","formatdefinition#compatible?()","spatio::conf()","import#create_fields()","import#create_namespace()","namespace#create_table()","numeric#duration()","formatdefinition#geo_columns()","formatdefinition#importer_parameters_format()","spatio::reader::base::inherited()","namespace#mandatory_fields()","formatdefinition#meta_data()","spatio::geocode::osmdata::new()","spatio::geocode::street::new()","spatio::importjob::new()","spatio::importer::new()","spatio::parser::base::new()","spatio::parser::district::new()","spatio::parser::street::new()","spatio::reader::base::new()","api#parse_params()","spatio::geocode::perform()","spatio::geocode::osmdata::perform()","spatio::geocode::osmdata#perform()","spatio::geocode::street::perform()","spatio::geocode::street#perform()","spatio::importjob#perform()","spatio::importjob::perform()","spatio::importer#perform()","spatio::parser::perform()","spatio::parser::base::perform()","spatio::parser::base#perform()","spatio::parser::city::perform()","spatio::parser::district#perform()","spatio::parser::district::perform()","spatio::parser::state::perform()","spatio::parser::street::perform()","spatio::parser::street#perform()","spatio::persist#perform()","spatio::reader::base#perform()","spatio::reader::base::perform()","formatdefinition#reader_class()","spatio::redis()","hash#same_keys?()","import#setup_namespace()","spatio::sparqlclient#states()","formatdefinition#title_columns()","formatdefinition#validate_reader_class()","",""],"info":[["Api","","Api.html","",""],["Community","","Community.html","",""],["District","","District.html","",""],["Field","","Field.html","",""],["FormatDefinition","","FormatDefinition.html","",""],["Gui","","Gui.html","",""],["Hash","","Hash.html","",""],["Import","","Import.html","",""],["Locality","","Locality.html","",""],["Namespace","","Namespace.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Road","","Road.html","",""],["Spatio","","Spatio.html","","<p>encoding: utf-8\n"],["Spatio::Geocode","","Spatio/Geocode.html","",""],["Spatio::Geocode::OsmData","","Spatio/Geocode/OsmData.html","",""],["Spatio::Geocode::Street","","Spatio/Geocode/Street.html","",""],["Spatio::ImportJob","","Spatio/ImportJob.html","",""],["Spatio::Importer","","Spatio/Importer.html","",""],["Spatio::NoLocationError","","Spatio/NoLocationError.html","",""],["Spatio::Parser","","Spatio/Parser.html","",""],["Spatio::Parser::Base","","Spatio/Parser/Base.html","",""],["Spatio::Parser::City","","Spatio/Parser/City.html","",""],["Spatio::Parser::District","","Spatio/Parser/District.html","",""],["Spatio::Parser::State","","Spatio/Parser/State.html","",""],["Spatio::Parser::Street","","Spatio/Parser/Street.html","",""],["Spatio::Persist","","Spatio/Persist.html","",""],["Spatio::Reader","","Spatio/Reader.html","",""],["Spatio::Reader::Base","","Spatio/Reader/Base.html","",""],["Spatio::Reader::CSV","","Spatio/Reader/CSV.html","",""],["Spatio::Reader::Excel","","Spatio/Reader/Excel.html","",""],["Spatio::Reader::RSS","","Spatio/Reader/RSS.html","",""],["Spatio::SparqlClient","","Spatio/SparqlClient.html","",""],["State","","State.html","",""],["all_fields","Namespace","Namespace.html#method-i-all_fields","()","<p>Returns namespace specific fields and mandatory fields.\n"],["cities","Spatio::SparqlClient","Spatio/SparqlClient.html#method-i-cities","()","<p>Returns all cities of Germany from the German dbpedia SPARQL endpoint.\n"],["compatibility_in_namespace","Import","Import.html#method-i-compatibility_in_namespace","()","<p>Validates that object is compatible to other Imports with the same\nnamespace.\n"],["compatible?","FormatDefinition","FormatDefinition.html#method-i-compatible-3F","(other_definition)","<p>Returns true if both objects have no meta_data\n<p>Returns true if both objects have the same keys in meta_data …\n"],["conf","Spatio","Spatio.html#method-c-conf","(file)","<p>Reads a YAML file and fetches the entry for the current RACK_ENV.\n"],["create_fields","Import","Import.html#method-i-create_fields","(namespace_id)","<p>Creates a new Field for each key in meta_data.\n"],["create_namespace","Import","Import.html#method-i-create_namespace","()","<p>Creates a new Namespace and calls create_fields.\n"],["create_table","Namespace","Namespace.html#method-i-create_table","()","<p>Creates a database table for the namespace with:\n<p>Columns for all_fields\n<p>Primary key on uuid\n"],["duration","Numeric","Numeric.html#method-i-duration","()","<p>Returns the duration in words:\n<p>In hours and minutes if &gt; 1 hour\n<p>In minutes and seconds if &gt; 1 minute …\n"],["geo_columns","FormatDefinition","FormatDefinition.html#method-i-geo_columns","()","<p>Returns importer_parameters\n"],["importer_parameters_format","FormatDefinition","FormatDefinition.html#method-i-importer_parameters_format","()","<p>validate that the object has valid importer_parameters\n"],["inherited","Spatio::Reader::Base","Spatio/Reader/Base.html#method-c-inherited","(subklass)","<p>Updates the Spatio::AVAILABLE_READERS constant whenever another class\ninherits from this Base class. …\n"],["mandatory_fields","Namespace","Namespace.html#method-i-mandatory_fields","()","<p>Returns all mandatory fields.\n"],["meta_data","FormatDefinition","FormatDefinition.html#method-i-meta_data","()","<p>Returns importer_parameters\n"],["new","Spatio::Geocode::OsmData","Spatio/Geocode/OsmData.html#method-c-new","(locations)","<p>Initialize a new OsmData object with a Hash with the following keys:\n<p>streets\n<p>districts\n"],["new","Spatio::Geocode::Street","Spatio/Geocode/Street.html#method-c-new","(locations)","<p>Initialize a new Street object with a Hash with the following keys:\n<p>streets\n<p>districts\n"],["new","Spatio::ImportJob","Spatio/ImportJob.html#method-c-new","(import)",""],["new","Spatio::Importer","Spatio/Importer.html#method-c-new","(entry, namespace, geo_context)",""],["new","Spatio::Parser::Base","Spatio/Parser/Base.html#method-c-new","(location_string, context)",""],["new","Spatio::Parser::District","Spatio/Parser/District.html#method-c-new","(location_string, cities)",""],["new","Spatio::Parser::Street","Spatio/Parser/Street.html#method-c-new","(location_string)","<p>Normalizes various short spellings of street (e.g. str, str. to straße in\nthe location_string\n"],["new","Spatio::Reader::Base","Spatio/Reader/Base.html#method-c-new","(parameters = {})","<p>Initialize a Reader class with a hash of parameters. Parameters have to\ninclude an URL to a resource …\n"],["parse_params","Api","Api.html#method-i-parse_params","(params)","<p>Reads the JSON object under the importer_parameters in the params Returns a\nRuby Hash with the following …\n"],["perform","Spatio::Geocode","Spatio/Geocode.html#method-c-perform","(locations)","<p>Calls Street.perform and returns it if present Falls back on\nOsmData.perform otherwise\n"],["perform","Spatio::Geocode::OsmData","Spatio/Geocode/OsmData.html#method-c-perform","(locations)","<p>Creates a new OsmData instance and then calls perform on it.\n"],["perform","Spatio::Geocode::OsmData","Spatio/Geocode/OsmData.html#method-i-perform","()","<p>Returns a district polygon if it finds one.\n<p>Returns a city polygon if it finds one otherwise.\n\n"],["perform","Spatio::Geocode::Street","Spatio/Geocode/Street.html#method-c-perform","(locations)","<p>Creates a new Street instance and then calls perform on it.\n"],["perform","Spatio::Geocode::Street","Spatio/Geocode/Street.html#method-i-perform","()","<p>Returns nil if no street is given.\n<p>Returns the first pair of coordinates for a street, district and city …\n"],["perform","Spatio::ImportJob","Spatio/ImportJob.html#method-i-perform","()","<p>Reads the entries from the URL in the Import\n<p>Creates a new Importer object for each entry and calls perform …\n\n"],["perform","Spatio::ImportJob","Spatio/ImportJob.html#method-c-perform","(id)","<p>Finds an Import with the id. Then creates a new ImportJob instance with it\ncalls perform on it.\n"],["perform","Spatio::Importer","Spatio/Importer.html#method-i-perform","()","<p>Calls Parser for the entry\n<p>Calls Geocode on result\n<p>Calls Persist on geocoded result\n"],["perform","Spatio::Parser","Spatio/Parser.html#method-c-perform","(location_string, context = '')","<p>Creates a new Base instance and then calls perform on it.\n"],["perform","Spatio::Parser::Base","Spatio/Parser/Base.html#method-c-perform","(location_string, context = '')","<p>Creates a new Base instance and then calls perform on it.\n"],["perform","Spatio::Parser::Base","Spatio/Parser/Base.html#method-i-perform","()","<p>Parses the location_string and context and returns a Hash with the\nfollowing keys\n<p>states\n<p>cities\n"],["perform","Spatio::Parser::City","Spatio/Parser/City.html#method-c-perform","(location_string)","<p>Returns all names of communities(cities) that occur in the location_string.\n"],["perform","Spatio::Parser::District","Spatio/Parser/District.html#method-i-perform","()","<p>Returns all names of districts that occur in the location_string and are\nalso located geographically …\n"],["perform","Spatio::Parser::District","Spatio/Parser/District.html#method-c-perform","(location_string, cities)","<p>Creates a new District instance and then calls perform on it.\n"],["perform","Spatio::Parser::State","Spatio/Parser/State.html#method-c-perform","(location_string)","<p>Returns all names of states that occur in the location_string.\n"],["perform","Spatio::Parser::Street","Spatio/Parser/Street.html#method-c-perform","(location_string)","<p>Creates a new Street instance and then calls perform on it.\n"],["perform","Spatio::Parser::Street","Spatio/Parser/Street.html#method-i-perform","()","<p>Returns all names of streets that occur in the location_string. Assigns a\nhigher priorities to streets …\n"],["perform","Spatio::Persist","Spatio/Persist.html#method-i-perform","(table_name, data)","<p>Saves the Hash of data into the PostGIS table named table_name\n"],["perform","Spatio::Reader::Base","Spatio/Reader/Base.html#method-i-perform","()","<p>Returns an Array of Hashes with the following keys:\n<p>location_string\n<p>title\n"],["perform","Spatio::Reader::Base","Spatio/Reader/Base.html#method-c-perform","(parameters)","<p>Creates a new Reader instance and then calls perform on it.\n"],["reader_class","FormatDefinition","FormatDefinition.html#method-i-reader_class","()","<p>Returns the Reader class that is referenced in the importer_class field.\n"],["redis","Spatio","Spatio.html#method-c-redis","()","<p>Returns or initializes a Redis instance.\n"],["same_keys?","Hash","Hash.html#method-i-same_keys-3F","(other_hash)","<p>Returns true if both hashes have the same (sorted) keys.\n"],["setup_namespace","Import","Import.html#method-i-setup_namespace","()","<p>Calls create_namespace if Namespace is not present.\n"],["states","Spatio::SparqlClient","Spatio/SparqlClient.html#method-i-states","()","<p>Returns all states of Germany from the German dbpedia SPARQL endpoint.\n"],["title_columns","FormatDefinition","FormatDefinition.html#method-i-title_columns","()","<p>Returns importer_parameters\n"],["validate_reader_class","FormatDefinition","FormatDefinition.html#method-i-validate_reader_class","()","<p>validate that the object has a valid Reader class.\n"],["Gemfile","","Gemfile.html","","<p>source ‘rubygems.org’ gem ‘sinatra’ gem ‘sinatra-activerecord’ gem\n‘sinatra-contrib’ gem ‘haml’ gem ‘coffee-script’ …\n"],["Rakefile","","Rakefile.html","","<p># Rakefile require ‘./lib/spatio.rb’ require ‘sinatra/activerecord/rake’\nrequire ‘resque/tasks’\n<p>APP_FILE …\n"]]}}